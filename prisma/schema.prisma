datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum NotificationType {
  FOLLOW
  LIKE
  COMMENT
}

enum AccountType {
  USER
  ADMIN
}

model User {
  username        String        @id
  name            String
  email           String?       @unique
  password        String        @default("password")
  avatarUrl       String        @default("/assets/images/users/default.jpg")
  bio             String?
  role            AccountType   @default(USER)

  accounts        Account[]
  sessions        Session[]

  posts           Post[]
  likes           Like[]
  comments        Comment[]
  following       Follow[]    @relation("Followers")
  followers       Follow[]    @relation("Following")

  bookshelf       UserBook[]

  notificationsSent       Notification[] @relation("NotificationActor")
  notificationsReceived   Notification[] @relation("NotificationRecipient")
}

model Book {
  isbn            String   @id
  title           String
  author          String
  publisher       String
  edition         Int
  pages           Int
  language        String
  publicationDate DateTime
  coverUrl        String        @default("/assets/images/books/default.jpg")

  posts           Post[]    
  inShelves       UserBook[]
}

model Post {
  id              String         @id @default(cuid())
  excerpt         String         @default("")
  progress        Int            @default(0)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  authorUsername  String
  bookIsbn        String

  author          User @relation(fields: [authorUsername],  references: [username])
  book            Book @relation(fields: [bookIsbn],        references: [isbn])

  comments        Comment[]
  likes           Like[]
  notifications   Notification[]  @relation("PostNotifications")
}

model Comment {
  id              String   @id @default(cuid())
  content         String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  postId          String
  authorUsername  String

  post            Post @relation(fields: [postId],          references: [id],        onDelete: Cascade)
  author          User @relation(fields: [authorUsername],  references: [username],  onDelete: Cascade)
}

model Like {
  userUsername    String
  postId          String
  createdAt       DateTime @default(now())

  user User @relation(fields: [userUsername], references: [username], onDelete: Cascade)
  post Post @relation(fields: [postId],       references: [id],       onDelete: Cascade)

  @@id([userUsername, postId])
}

model Follow {
  followerId      String
  followedId      String

  follower User @relation("Following", fields: [followerId], references: [username], onDelete: Cascade)
  followed User @relation("Followers", fields: [followedId], references: [username], onDelete: Cascade)

  @@id([followerId, followedId])
}

model UserBook {
  userUsername    String
  bookIsbn        String
  progress        Int         @default(0)
  addedAt         DateTime    @default(now())

  user User @relation(fields: [userUsername], references: [username], onDelete: Cascade)
  book Book @relation(fields: [bookIsbn],     references: [isbn],     onDelete: Cascade)

  @@id([userUsername, bookIsbn])
}

model Notification {
  id              String            @id @default(cuid())
  notifType       NotificationType
  createdAt       DateTime          @default(now())
  readAt          DateTime?

  recipientId     String
  actorId         String
  postId          String?

  recipient   User  @relation("NotificationRecipient",  fields: [recipientId],  references: [username], onDelete: Cascade)
  actor       User  @relation("NotificationActor",      fields: [actorId],      references: [username], onDelete: Cascade)
  post        Post? @relation("PostNotifications",      fields: [postId],       references: [id],       onDelete: Cascade)

  @@index([recipientId])
}

model Account {
  id                String  @id @default(cuid())
  userUsername      String
  accountType       AccountType
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userUsername], references: [username], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id                String   @id @default(cuid())
  sessionToken      String   @unique
  userUsername      String
  expires           DateTime

  user User @relation(fields: [userUsername], references: [username], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
